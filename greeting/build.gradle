plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.multiplatform'

    id 'kotlinx-serialization'
}

group = 'org.greeting'
version = 1.0

android {
    compileSdkVersion 27
    defaultConfig {
        minSdkVersion 15
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    // Specify Kotlin/JVM stdlib dependency.
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk7'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    androidTestImplementation 'junit:junit:4.12'
    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test'
    androidTestImplementation 'org.jetbrains.kotlin:kotlin-test-junit'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

ext {
    retrofitVersion = "2.3.0"
    coroutine_version = "1.2.1"
    serializer_version = "0.11.0"
    ktor_version = "1.1.4"

    sqldelight_version = "1.1.3"

    support_library_version = '28.1.1'
    constraint_layout_version = '1.1.0'
    espresso_version = '3.0.1'
    retrofit_version = '2.4.0'
    okhttp_version = '3.9.1'
    kotlin_coroutines_version = '1.0.0'
    mockito_version = '2.18.3'

    anko_version = '0.10.4'
    buildToolsVersion = "27.0.3"
    playServicesLocationVersion = "16.0.0"
    playServicesAuthVersion = "15.0.1"
    playServicesVisionVersion = "15.0.2"

    firebaseAuthVersion = "16.0.2"
    firebaseCoreVersion = "16.0.1"
    firebaseMessagingVersion = "17.1.0"
    firebaseFireStoreVersion = "17.0.3"
    firebaseDatabaseVersion = "16.0.1"

    retrofitVersion = "2.3.0"
    butterknifeVersion = "10.1.0"
    daggerVersion = "2.22.1"
    picassoVersion = "2.71828"
    roomVersion = '2.0.0-beta01'
    gsonVersion = "2.8.5"
    leakCanaryVersion = "1.6.3"

    GsonVersion = "2.8.4"
    work_manager_version = '1.0.0'
    androidPlotVersion = "1.5.6"


}


kotlin {
    targets {
        fromPreset(presets.android, 'androidLib')

        def buildForDevice = project.findProperty("device")?.toBoolean() ?: false
        def iosPreset = (buildForDevice) ? presets.iosArm64 : presets.iosX64
        fromPreset(iosPreset, 'ios') {
            binaries {
                framework {
                    // Disable bitcode embedding for the simulator build.
                    if (!buildForDevice) {
                        embedBitcode("disable")
                    }
                }
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-stdlib-common:1.3.31'

                // COROUTINE
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"

                // SERIALIZATION
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializer_version"


                // KTOR
                implementation "io.ktor:ktor-client-core:$ktor_version"
            }
        }

        iosMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib-common:1.3.31'

            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutine_version"

            // SERIALIZATION
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serializer_version"

            // KTOR
            implementation "io.ktor:ktor-client-ios:$ktor_version"

            // SQL Delight
            //implementation "com.squareup.sqldelight:ios-driver:$sqldelight_version"
        }

        commonTest {
            dependencies {
                implementation 'org.jetbrains.kotlin:kotlin-test-common'
                implementation 'org.jetbrains.kotlin:kotlin-test-annotations-common'
            }
        }
    }
}

task copyFramework {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'greeting.framework/**'
            include 'greeting.framework.dSYM'
        }
    }
}

task iosTest {
    def device = project.findProperty("iosDevice")?.toString() ?: "iPhone 8"
    dependsOn 'linkTestDebugExecutableIos'
    group = JavaBasePlugin.VERIFICATION_GROUP
    description = "Runs tests for target 'ios' on an iOS simulator"

    doLast {
        def binary = kotlin.targets.ios.binaries.getExecutable('test', 'DEBUG').outputFile
        exec {
            commandLine 'xcrun', 'simctl', 'spawn', device, binary.absolutePath
        }
    }
}
